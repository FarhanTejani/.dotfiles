import java.util.ArrayList;

/**
 * Mucisian that will buy and sell Instruments
 * @author Farhan
 * @version 1.0
 */

public class Musician {
    private ArrayList<String> instruments = new ArrayList<String>();
    private String name;
    private double funds;

    /**
     * Musician constructor
     * @param  name  name of musician
     * @param  funds funds for musician
     * @param  first required first instrument
     */
    public Musician(String name, double funds, Instrument first) {
        this.name = name.trim().toLowerCase();
        this.funds = funds;
        purchase(first);
    }

    /**
     * number of instruments musician owns
     * @return int number of instruments
     */
    public int getNumberOfInstruments() {
        return instruments.size();
    }

    /**
     * Getter method for name of musician
     * @return String name
     */
    public String getName() {
        return name;
    }

    /**
     * Getter method for amount of funds
     * @return double funds
     */
    public double getFunds() {
        return funds;
    }

    /**
     * Allows musician to buy instruments
     * @param i Instrument to buy
     */
    public void purchase(Instrument i) {
        try {
            if (funds - i.getPrice() < 0) {
                throw new NotEnoughFundsException(
                    "Not enough funds.");
            } else if (instruments.contains(i.getSerial())) {
                throw new RepeatedInstrumentException(
                    "Instrument is already owned.");
            } else {
                funds -= i.getPrice();
                instruments.add(i.getSerial());
            }
        } catch (NotEnoughFundsException e) {
            System.out.println(e.getMessage());
        } catch (RepeatedInstrumentException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Allows musician to sell instruments
     * @param i Instrument to sell
     */
    public void sell(Instrument i) {
        try {
            if (!instruments.contains(i.getSerial())) {
                throw new DoesNotOwnException(
                    "Can't sell unowned instrument.");
            } else if (instruments.size() <= 1) {
                throw new FinalInstrumentException(
                    "Can't sell last instrument.");
            } else {
                funds += i.getPrice();
                instruments.remove(i.getSerial());
            }
        } catch (DoesNotOwnException e) {
            System.out.println(e.getMessage());
        } catch (FinalInstrumentException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Overrides toString() for this class
     * @return String representation of class
     */
    @Override
    public String toString() {
        return getName() + " has $" + getFunds() + " and "
                + getNumberOfInstruments() + " instrument(s)";
    }
}